using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro; // TextMeshProを使用するための名前空間

/*
 監督オブジェクト（Game Manager）を作成することにはいくつかの重要なメリットがあります。特に、ゲームが複雑になるにつれて、その価値はさらに明確になります。以下に、監督オブジェクトを使用する主なメリットを説明します。

### 監督オブジェクト（Game Manager）のメリット

#### 1. ゲーム全体の管理
監督オブジェクトは、ゲームの全体的な状態や進行を管理する中心的な役割を果たします。これにより、以下のような利点があります。
- **状態の一元管理**: ゲームの状態（例えば、現在のスコア、残り時間、プレイヤーのライフなど）を一元的に管理できます。これにより、ゲーム全体のロジックを統一的に扱うことができます。

#### 2. コードの整理
監督オブジェクトを使用することで、ゲームのロジックを整理しやすくなります。
- **コードのモジュール化**: ゲームの各要素（UI、スコア管理、プレイヤー管理など）を別々のスクリプトやオブジェクトに分けて管理することで、コードが分かりやすくなり、保守しやすくなります。

#### 3. デバッグとテストの容易化
監督オブジェクトを使用することで、デバッグやテストが容易になります。
- **デバッグの集中化**: ゲームの主要なロジックが監督オブジェクトに集約されるため、問題が発生した場合のデバッグが容易になります。
- **一貫性のあるテスト**: 監督オブジェクトがゲームの状態を一貫して管理するため、テストの際に安定した環境を提供できます。

#### 4. 依存関係の明確化
監督オブジェクトを使用することで、ゲーム内のオブジェクト間の依存関係が明確になります。
- **依存関係の管理**: 各オブジェクトが監督オブジェクトに依存することで、依存関係が明確になり、コードの流れが理解しやすくなります。

#### 5. 将来の拡張性
ゲームが成長し、機能が追加される際に、監督オブジェクトを使用することで拡張が容易になります。
- **拡張の容易さ**: 新しい機能や要素を追加する際に、監督オブジェクトに関連するロジックを追加するだけで対応できるため、全体の構造を大きく変更する必要がありません。

### 具体例

たとえば、次のような状況を考えてみましょう。
- ゲームにはスコア、タイマー、プレイヤーのライフ、複数のレベルなどがあります。
- 各要素を個別に管理するのではなく、監督オブジェクトを使って一元管理することで、以下のような利点があります。

#### スコア管理
- **監督オブジェクト**: 現在のスコアを保存し、必要に応じてスコアを更新します。他のスクリプトがスコアを監督オブジェクトから取得し、表示することができます。

#### タイマー管理
- **監督オブジェクト**: ゲームの残り時間を管理し、時間切れになった場合に適切な処理を行います。タイマーをUIに表示するスクリプトは、監督オブジェクトからタイマーの状態を取得します。

#### プレイヤーのライフ管理
- **監督オブジェクト**: プレイヤーのライフを管理し、ライフがなくなった場合にゲームオーバーの処理を行います。他のスクリプトはライフの状態を監督オブジェクトから取得します。

### まとめ

監督オブジェクトを使用することで、ゲームの状態管理が一元化され、コードの整理、デバッグの容易さ、依存関係の明確化、将来の拡張性など多くのメリットがあります。特に、ゲームが複雑になるにつれて、その価値はさらに明確になります。小さなゲームでは必要性が感じられないかもしれませんが、規模が大きくなるほど管理の利便性が大きくなります。

これで、監督オブジェクトを使うことのメリットが理解できたと思います。次に、具体的なコードと設定方法を進めていきましょう。
 */


public class GameManager : MonoBehaviour
{
    // 車とフラッグのTransformを設定する変数
    public Transform carTransform;
    public Transform flagTransform;
    // 距離を表示するTextMeshProUGUIコンポーネントを設定する変数
    public TextMeshProUGUI distanceText;

    void Update()
    {
        // 車とフラッグの間の距離を計算
        float distance = Vector2.Distance(carTransform.position, flagTransform.position);

        // 距離をテキストに表示
        distanceText.text = "距離: " + distance.ToString("F2") + "m";
    }
}

