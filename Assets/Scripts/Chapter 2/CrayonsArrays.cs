using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/*
 このプログラムでは、5色のクレヨンを箱（配列）に入れて、それぞれのクレヨンを一つずつ見ていきます。
crayons.Length は配列の長さ、つまりクレヨンの数を教えてくれます。
forループを使って、箱の中のクレヨンを一つずつ取り出して、何番目にどんな色があるかを確認しています。

配列を使うメリット
配列を使うと、同じ種類のたくさんのデータを簡単に管理できます。
例えば、クラスの全員のテストの点数や、お気に入りのアニメのリストなど、似たようなものをまとめておくのに便利です。
それに、何番目に何があるかを簡単に知ることができるので、情報をすぐに見つけられます。

このように配列を使うことで、プログラミングがもっと楽しく、役に立つものになります。いろいろなデータを配列に入れて管理してみるといいでしょう！


下記の配列では、一度作成するとそのサイズを変更することはできません。
つまり、配列に新しい要素を追加したり、要素を削除したりすることは直接的にはできないのです。
ただし、新しい要素を追加したい場合や、要素を削除したい場合には、新しい配列を作成して、元の要素を新しい配列にコピーする必要があります。
追加削除ならListを使いましょう

 */

public class CrayonsArrays : MonoBehaviour
{

// Start is called before the first frame update
    void Start()
    {
        // 5色のクレヨンを配列で作る
        string[] crayons = new string[5];  // 「string」は文字のデータを保存するという意味
        crayons[0] = "赤";  // 0番目の位置に「赤」を入れる
        crayons[1] = "青";  // 1番目の位置に「青」を入れる
        crayons[2] = "緑";  // 2番目の位置に「緑」を入れる
        crayons[3] = "黄";  // 3番目の位置に「黄」を入れる
        crayons[4] = "紫";  // 4番目の位置に「紫」
        
        // 配列の中身を確認する
        for (int i = 0; i < crayons.Length; i++)
        {
            Debug.Log("クレヨンの" + (i + 1) + "番目の色は" + crayons[i] + "です。");
        }
    }

}
