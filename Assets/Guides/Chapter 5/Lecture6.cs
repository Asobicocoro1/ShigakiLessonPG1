using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/*



### 講義6: 当たり判定を学ぼう（2Dゲーム編）

#### 当たり判定って何？
- **当たり判定**（あたりはんてい）は、ゲームの中でオブジェクト同士がぶつかったかどうかを確認する仕組みのことです。例えば、プレイヤーキャラクターが敵にぶつかったときにダメージを受けたり、アイテムを取ったりするのは、当たり判定のおかげです。

#### 簡単な当たり判定
- **基本的な当たり判定の実装方法を学びましょう**
  - Unityでは、当たり判定を行うために「Collider」（コライダー）というコンポーネントを使います。
  - プレイヤーや敵、アイテムなどにコライダーを追加して、当たり判定を行います。

#### 当たり判定のスクリプトを実装する
- **スクリプトを使って当たり判定を実装しよう**
  - プレイヤーがアイテムを取るとポイントが増える、または敵にぶつかるとダメージを受けるようなスクリプトを作成します。

- **例：プレイヤーがアイテムに触れた時のスクリプト**
  - プレイヤーオブジェクトに以下のスクリプトを追加します：

```csharp
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    public int score = 0; // プレイヤーのスコアを保持します

    void OnTriggerEnter2D(Collider2D other)
    {
        // アイテムに触れたとき
        if (other.gameObject.CompareTag("Item"))
        {
            score += 1; // スコアを1増やします
            Destroy(other.gameObject); // アイテムを消します
        }
    }
}
```

- **日本語解説付きのスクリプトの説明**
  - `public int score = 0;`  
    - プレイヤーのスコアを保持する変数です。ゲームの開始時は0です。

  - `void OnTriggerEnter2D(Collider2D other)`  
    - このメソッドは、プレイヤーが他のオブジェクトに触れたときに呼び出されます。`Collider2D`は2Dのコライダーを意味します。

  - `if (other.gameObject.CompareTag("Item"))`  
    - 触れたオブジェクトが「Item」というタグを持っているかどうかを確認します。タグは、オブジェクトにラベルを付けるためのものです。

  - `score += 1;`  
    - スコアを1増やします。

  - `Destroy(other.gameObject);`  
    - 触れたオブジェクト（アイテム）を消します。

#### コライダーの追加
- **プレイヤーとアイテムにコライダーを追加しよう**
  - プレイヤーオブジェクトを選択し、「インスペクター」ウィンドウで「Add Component（コンポーネントを追加）」をクリックします。
  - 「Box Collider 2D」または「Circle Collider 2D」を選びます。プレイヤーの形に合ったコライダーを選びます。
  - 同様に、アイテムオブジェクトにもコライダーを追加します。
  - コライダーの「Is Trigger」にチェックを入れます。これにより、当たり判定が「トリガー」として機能し、物理的な衝突はしませんが、触れたことを検出できます。

#### まとめ
- 当たり判定を使って、プレイヤーがアイテムを取ったり、敵にぶつかったりする動作を実装しました。これにより、ゲームのインタラクティブ性が増し、プレイヤーにとって面白い体験が提供できます。

これで、講義6の内容がわかりやすくなったかな？分からないところがあったら、気軽に質問してね！
 */
public class Lecture6 : MonoBehaviour
{
   
}
