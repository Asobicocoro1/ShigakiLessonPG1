using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/*
 * アセンブリ（Assembly）は、.NETフレームワークおよび.NET Coreで使用される用語で、一連のコンパイル済みコードとリソースを一つにまとめた単位を指します。
Unityでのゲーム開発においても、この概念が背景にあります。
アセンブリは主にDLL（Dynamic-Link Library）またはEXE（Executable）ファイルとして存在し、C#などの.NET言語で書かれたプログラムがコンパイルされると生成されます。

### アセンブリの概要
アセンブリは、以下のような情報や要素を含むことができます：
- **実行可能なコード**：クラス、構造体、インターフェースなど、プログラムを形成する各種データと関数（メソッド）。
- **リソース**：画像、文字列、その他のデータファイルなど、プログラムが使用する追加の資材。
- **メタデータ**：アセンブリ自身の情報（例えば、バージョン番号や著作権情報）、アセンブリに含まれる型に関する情報など。

### アセンブリの役割
- **再利用性**：一度コンパイルされたコードは、他のプログラムから参照され再利用されることができます。これにより、コードの再利用性が向上します。
- **セキュリティ**：アセンブリ単位でアクセス許可やセキュリティポリシーを設定できるため、アプリケーションの安全性を高めることができます。
- **バージョン管理**：同じアセンブリでも異なるバージョンを同時にシステム上に存在させることが可能です。

### Unityでのアセンブリ
Unityでは、スクリプトファイルはコンパイルされてアセンブリとして管理されます。
通常、Unityプロジェクトでは複数のアセンブリが生成され、プロジェクトのスクリプトが分割されてそれぞれ異なるアセンブリに格納されることがあります。
例えば、標準的なUnityプロジェクトでは、以下のようなアセンブリが存在します：

- **Assembly-CSharp.dll**：ユーザーが作成したスクリプトのほとんどが含まれるアセンブリ。
- **Assembly-CSharp-Editor.dll**：エディタ専用のスクリプトが含まれるアセンブリ。このアセンブリ内のコードは、ゲームのビルドには含まれません。

「internal」アクセス修飾子を使うと、同じアセンブリ内でのみアクセス可能なメンバーを作成できるため、他のアセンブリからはアクセスできないように制限することができます。
これは、ライブラリやフレームワークを設計する際に特に有用です。

 * 
 */


public class Chapter3Guide : MonoBehaviour
{

}
