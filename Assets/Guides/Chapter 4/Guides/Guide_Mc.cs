using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/*
 ### UnityのMesh Colliderのインスペクターの中身について

Mesh Collider（メッシュコライダー）は、3Dオブジェクトの形に基づいて物理的な衝突判定を行うためのコンポーネントです。
これにより、複雑な形状のオブジェクトでも正確な衝突判定ができます。

#### 1. **Convex (コンベックス)**
- **説明**: コライダーの形を凸形状（外側に膨らんだ形）にします。凸形状にすることで、より高速な衝突判定が可能になりますが、形状が単純化されます。
- **使い方**: チェックを入れると凸形状に設定されます。物理的に動くオブジェクトにはチェックを入れる必要があります。

#### 2. **Is Trigger (トリガー)**
- **説明**: コライダーをトリガーとして設定します。トリガーは物理的な衝突を無視し、衝突イベントを発生させます。
- **使い方**: チェックを入れるとトリガーとして動作します。プレイヤーがエリアに入ったりするときに使います。

#### 3. **Material (マテリアル)**
- **説明**: 物理マテリアルを適用して、摩擦や跳ね返りの特性を設定します。
- **使い方**: 物理マテリアルをドラッグ＆ドロップして設定します。たとえば、氷のように滑る設定やゴムのように跳ねる設定ができます。

#### 4. **Mesh (メッシュ)**
- **説明**: 衝突判定を行うためのメッシュを設定します。
通常はオブジェクトにアタッチされたメッシュを自動的に使用しますが、特定のメッシュを指定することもできます。
- **使い方**: 特定のメッシュを使用したい場合は、メッシュをドラッグ＆ドロップして設定します。

#### 5. **Cooking Options (クッキングオプション)**
- **説明**: メッシュコライダーの生成方法を詳細に設定します。

1. **Inflate Mesh (メッシュの膨張)**
   - **説明**: メッシュをわずかに膨らませて、衝突判定をより確実に行います。
   - **使い方**: チェックを入れると膨張が有効になります。通常はデフォルト設定のままで問題ありません。

2. **Cook For Faster Simulation (シミュレーションの高速化のためのクッキング)**
   - **説明**: シミュレーションを高速化するためにメッシュのデータを最適化します。
   - **使い方**: チェックを入れると高速化が有効になります。通常はデフォルト設定のままで問題ありません。

3. **Enable Mesh Cleaning (メッシュクリーニングの有効化)**
   - **説明**: 不要なメッシュデータを削除して最適化します。
   - **使い方**: チェックを入れるとクリーニングが有効になります。通常はデフォルト設定のままで問題ありません。

4. **Weld Colocated Vertices (隣接頂点のウェルド)**
   - **説明**: 隣接する頂点を結合してメッシュを簡略化します。
   - **使い方**: チェックを入れるとウェルドが有効になります。通常はデフォルト設定のままで問題ありません。

5. **Vertex Welding Threshold (頂点ウェルド閾値)**
   - **説明**: ウェルドする頂点の距離の閾値を設定します。
   - **使い方**: 数値を設定して閾値を調整します。通常はデフォルト設定のままで問題ありません。

### まとめ
Mesh Colliderの設定を理解することで、複雑な形状の3Dオブジェクトに対しても正確な衝突判定を行うことができます。
凸形状やトリガーの設定、物理マテリアルの適用などを適切に行い、ゲーム内でリアルな物理演算を実現しましょう
。色々な設定を試して、自分のゲームに最適な衝突判定を作り上げましょう。
 */

public class Guide_Mc : MonoBehaviour
{
 
}
