using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/*
 ### Chapter 4: UIと監督オブジェクト

#### 4-5 UIを表示しよう

このセクションでは、ゲームに必要なUI（ユーザーインターフェース）の基本を学びます。
UIを使ってゲームの情報をプレイヤーに表示する方法を理解し、簡単なテキスト表示を実装します。

#### 4-5-1 UIの設計方針

##### 講義内容
1. **UIの役割**
   - ゲーム内でプレイヤーに情報を提供するためのインターフェースです。
   - 例えば、スコア、残り時間、体力などを表示します。

2. **UIの設計**
   - 見やすく、使いやすいデザインを考えます。
   - プレイヤーにとって重要な情報を適切な場所に配置します。

#### 4-5-2 テキストを使って距離を表示する
##### 講義内容
1. **Canvasの作成**
   - Unityのメニューから「GameObject」 > 「UI」 > 「Canvas」を選択します。
   - Canvasは、UIを表示するための領域です。

2. **Textオブジェクトの作成**
   - Canvasの下に「Text」を追加します。「GameObject」 > 「UI」 > 「Text」を選択します。
   - Textオブジェクトは、文字を表示するためのUIコンポーネントです。

3. **Textオブジェクトの設定**
   - ヒエラルキーウィンドウで「Text」を選択し、インスペクターで以下の設定を行います。
     - **Text**: 表示する文字を入力します（例: "距離: 0m"）。
     - **Font Size**: フォントサイズを調整します（例: 24）。
     - **Alignment**: テキストの配置を設定します（中央揃えなど）。
     - **Color**: テキストの色を設定します（例: 白色）。

4. **スクリプトでテキストを更新する**
   - 距離の情報を表示するために、テキストを動的に更新するスクリプトを作成します。


5. **スクリプトのアタッチ**
   - ヒエラルキーウィンドウで「Text」オブジェクトを選択し、インスペクターで「Add Component」をクリックして「DistanceDisplay」スクリプトを追加します。
   - スクリプトの「Distance Text」に「Text」オブジェクトをドラッグ＆ドロップします。

これで、ゲーム内で距離を表示するUIが完成しました。
プレイヤーはゲーム中にリアルタイムで距離の情報を確認できるようになります
。次のセクションでは、UIの更新方法についてさらに詳しく学びます。
 */

public class DistanceDisplayGuide : MonoBehaviour
{
   
}
