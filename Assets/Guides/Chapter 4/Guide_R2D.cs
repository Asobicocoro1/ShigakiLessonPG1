using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/*
 ### UnityのRigidbody2Dのインスペクターの中身について

Rigidbody2D（リジッドボディ2D）は、Unityで2D物理演算を行うためのコンポーネントです。
これを使うことで、オブジェクトが重力の影響を受けたり、衝突したりするようになります。

#### 1. **Body Type (ボディタイプ)**
- **説明**: オブジェクトがどのように動くかを決めます。
- **使い方**: 以下の3つから選びます。

  1. **Dynamic (ダイナミック)**
     - **説明**: 自由に動くことができ、重力や力の影響を受けます。
     - **使い方**: 通常の動くオブジェクトに使います（例: 車、キャラクター）。

  2. **Kinematic (キネマティック)**
     - **説明**: 自由には動けませんが、スクリプトで動かすことができます。衝突しても他のオブジェクトに影響を与えません。
     - **使い方**: 動くプラットフォームや動きが制御されたオブジェクトに使います。

  3. **Static (スタティック)**
     - **説明**: まったく動きません。地面や壁など、動かないオブジェクトに使います。
     - **使い方**: 地面や壁など、固定されたオブジェクトに使います。

#### 2. **Material (マテリアル)**
- **説明**: 物理的な特性を決めるための設定です。例えば、どれくらい跳ねるかなどを決めます。
- **使い方**: 物理マテリアルをドラッグ＆ドロップします。

#### 3. **Simulated (シミュレート)**
- **説明**: 物理演算を有効にするかどうかを決めます。
- **使い方**: チェックを入れると物理演算が有効になります。

#### 4. **Use Auto Mass (自動質量を使用)**
- **説明**: 自動的に質量を設定します。オブジェクトの大きさから計算されます。
- **使い方**: チェックを入れると自動的に質量が設定されます。

#### 5. **Mass (質量)**
- **説明**: オブジェクトの重さを決めます。重いほど動きにくくなります。
- **使い方**: 数字を入力して質量を設定します。

#### 6. **Linear Drag (線形ドラッグ)**
- **説明**: 空気抵抗のように、オブジェクトの動きを遅くする力です。
- **使い方**: 数字を入力して、動きの遅さを設定します。値が大きいほど動きが遅くなります。

#### 7. **Angular Drag (角度ドラッグ)**
- **説明**: 回転の動きを遅くする力です。
- **使い方**: 数字を入力して、回転の遅さを設定します。値が大きいほど回転が遅くなります。

#### 8. **Gravity Scale (重力スケール)**
- **説明**: 重力の影響をどれくらい受けるかを決めます。
- **使い方**: 数字を入力して重力の影響を設定します。値を1にすると通常の重力、0にすると重力の影響を受けません。

#### 9. **Collision Detection (衝突検出)**
- **説明**: 衝突の検出方法を決めます。
- **使い方**: 以下の2つから選びます。

  1. **Discrete (ディスクリート)**
     - **説明**: 通常の方法で衝突を検出します。高速なオブジェクトには向きません。
     - **使い方**: 普通の動くオブジェクトに使います。

  2. **Continuous (コンティニュアス)**
     - **説明**: 高速で動くオブジェクトでも正確に衝突を検出します。
     - **使い方**: 高速で動くオブジェクトに使います。

#### 10. **Sleeping Mode (スリーピングモード)**
- **説明**: オブジェクトが動かないときの状態を決めます。
- **使い方**: 以下の3つから選びます。

  1. **Never Sleep (スリープしない)**
     - **説明**: ずっと動きを検出し続けます。
     - **使い方**: 常に動きを検出したい場合に使います。

  2. **Start Awake (アウェイクで開始)**
     - **説明**: 最初は動きを検出しますが、しばらく動かないとスリープ状態になります。
     - **使い方**: 普通のオブジェクトに使います。

  3. **Start Asleep (スリープで開始)**
     - **説明**: 最初からスリープ状態になり、動き始めると検出します。
     - **使い方**: 初めは動かないオブジェクトに使います。

#### 11. **Interpolation (補間)**
- **説明**: 動きを滑らかに見せるための設定です。
- **使い方**: 以下の3つから選びます。

  1. **None (なし)**
     - **説明**: 補間を使いません。動きがカクカク見えることがあります。
     - **使い方**: 必要ない場合に使います。

  2. **Interpolate (補間する)**
     - **説明**: 前のフレームの位置と現在の位置の間を滑らかにします。
     - **使い方**: 動きを滑らかにしたい場合に使います。

  3. **Extrapolate (外挿する)**
     - **説明**: 次のフレームの位置を予測して滑らかにします。
     - **使い方**: より滑らかに見せたい場合に使います。

#### 12. **Constraints (制約)**
- **説明**: オブジェクトの動きを制限する設定です。
- **使い方**: 以下の設定を使って動きを制限します。

  1. **Freeze Position (位置を固定)**
     - **説明**: オブジェクトの位置を固定します。
     - **使い方**: XやYにチェックを入れて、その方向の動きを止めます。

  2. **Freeze Rotation (回転を固定)**
     - **説明**: オブジェクトの回転を固定します。
     - **使い方**: Zにチェックを入れて、回転を止めます。

### まとめ
Rigidbody2Dの設定を理解することで、ゲーム内のオブジェクトがどのように動くか、重力や力の影響を受けるかをコントロールできます。これにより、リアルな動きや衝突を持つ楽しいゲームを作ることができるようになります。
 */

public class Guide_R2D : MonoBehaviour
{
 
}
