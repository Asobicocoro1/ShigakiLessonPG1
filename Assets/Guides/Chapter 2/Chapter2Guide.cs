using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/*
 1変数とデータ型:ScoreChecker

変数は、ゲームで使う数字や文字の情報を保存する箱のようなものです。例えば、「プレイヤーの点数」を保存する箱があれば、その点数をいつでも見ることができます。
データ型は、その箱がどんな情報を保存できるかを決めるルールです。数字だけを保存する箱、文字だけを保存する箱があります。

2条件文:ScoreChecker

if文は、「もしも〜なら、こうしよう」と決めるときに使います。例えば、「もしプレイヤーの点数が100点以上なら、『すごい！』と表示する」というルールを作ることができます。

3ループ:ApplePicker

繰り返しをするためのルールです。同じ動作を何度も行いたい時に使います。例えば、「10匹の敵を作る」ときに、同じ作業を10回繰り返します。

4関数:GameController

関数は、特定の仕事をするための小さなプログラムの部品です。何度も同じことをする時、その仕事を一つの関数にまとめておくと、何度も同じコードを書かなくても、その関数を使うだけで済みます。
これらのことを覚えると、ゲームを作る時にとても役に立ちます。次にこれらを使って、実際にゲームの中でどう動くかを見てみましょうね！

5配列(通常):CrayonsArrays

配列は、たくさんのものをきれいに整理して一緒に保管できる箱みたいなものです。たとえば、クレヨンがたくさんあるとします。
それらを一つずつ机の上に置いておくと、使いたい色をすぐに見つけられなかったり、なくしてしまったりするかもしれません。
でも、それらを一つの箱に順番に並べて入れておけば、使いたいときにすぐに見つけることができます。
プログラミングにおける配列も同じで、たくさんのデータを一つの場所に整理して保存することができます。

5配列の使い方(通常):CrayonsArrays
配列を使うと、たくさんの数字や文字などを一つの名前で管理できるようになります。これを例で見てみましょう。

6配列（リスト（List））リストとは？:PetListExample
リストは、たくさんのデータを一緒に保持できる特別な箱です。この箱は伸縮自在で、新しいものを追加するときも、不要なものを取り除くときもとても簡単です。
例えば、お友達の名前をリストに入れておいたり、好きなアニメのキャラクターをリストに入れたりすることができます。

6リストの使い方PetListExample
リストにはいろいろな使い方がありますが、基本的には「追加」、「削除」、「見る」の３つの操作がよく使われます。

困ったら上記の内容をAIに聞こう（どこ？何すればいいの？説明せよなど）
 */
public class Chapter2Guide : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}
