using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/*
 1変数とデータ型(演算):Operation

変数は、ゲームで使う数字や文字の情報を保存する箱のようなものです。例えば、「プレイヤーの点数」を保存する箱があれば、その点数をいつでも見ることができます。
データ型は、その箱がどんな情報を保存できるかを決めるルールです。数字だけを保存する箱、文字だけを保存する箱があります。

1.5アクセス修飾子:Access modifiers
クセス修飾子は、プログラミングにおいてクラスのメンバー（変数、メソッド、プロパティなど）へのアクセスレベルを制御するために使用されるキーワードです。
これにより、クラスのデータが意図しない方法で使われることを防ぎ、オブジェクト指向プログラミングの重要な原則であるカプセル化（データ隠蔽）を実現します。

2条件文:ScoreChecker

if文は、「もしも〜なら、こうしよう」と決めるときに使います。例えば、「もしプレイヤーの点数が100点以上なら、『すごい！』と表示する」というルールを作ることができます。

3ループ:ApplePicker

繰り返しをするためのルールです。同じ動作を何度も行いたい時に使います。例えば、「10匹の敵を作る」ときに、同じ作業を10回繰り返します。

4関数:GameController&&SimpleActions 

(引数と返り値の有無)
関数は、特定の仕事をするための小さなプログラムの部品です。何度も同じことをする時、その仕事を一つの関数にまとめておくと、何度も同じコードを書かなくても、その関数を使うだけで済みます。
これらのことを覚えると、ゲームを作る時にとても役に立ちます。次にこれらを使って、実際にゲームの中でどう動くかを見てみましょうね！

5配列(通常):CrayonsArrays

配列は、たくさんのものをきれいに整理して一緒に保管できる箱みたいなものです。たとえば、クレヨンがたくさんあるとします。
それらを一つずつ机の上に置いておくと、使いたい色をすぐに見つけられなかったり、なくしてしまったりするかもしれません。
でも、それらを一つの箱に順番に並べて入れておけば、使いたいときにすぐに見つけることができます。
プログラミングにおける配列も同じで、たくさんのデータを一つの場所に整理して保存することができます。

5配列の使い方(通常):CrayonsArrays
配列を使うと、たくさんの数字や文字などを一つの名前で管理できるようになります。これを例で見てみましょう。

6配列（リスト（List））リストとは？:PetListExample
リストは、たくさんのデータを一緒に保持できる特別な箱です。この箱は伸縮自在で、新しいものを追加するときも、不要なものを取り除くときもとても簡単です。
例えば、お友達の名前をリストに入れておいたり、好きなアニメのキャラクターをリストに入れたりすることができます。

6リストの使い方:PetListExample
リストにはいろいろな使い方がありますが、基本的には「追加」、「削除」、「見る」の３つの操作がよく使われます。

7配列(辞書)とは？:FriendColors 
辞書は、キーと値のペアで情報を保存します。たとえば、「りんご」は「赤い」と説明することができるように、一つ一つのアイテムにはそれに対応する説明や情報があります。これをプログラムで使うと、情報をすぐに見つけられるので、たくさんのデータの中から必要なものを探すのに役立ちます。

7辞書の使い方:FriendColors 
辞書には、「追加」、「取得」、「削除」といった操作がよく使われます。それでは、具体的な例を見てみましょう。

8スタックとは？:StackExample 
スタックは、データを一時的に保存するのに便利な方法で、例えば、皿を積み重ねるときに、新しい皿は上に置き、使うときは上から順番に取るのと似ています。
プログラミングでは、このような操作をデータで行うことができるんです。

8スタックの基本操作:StackExample 
スタックでよく使われる操作には「プッシュ（Push）」と「ポップ（Pop）」があります。

プッシュ（Push）：新しい要素をスタックの一番上に追加します。
ポップ（Pop）：スタックの一番上から要素を取り出して、それを削除します。
スタックの例
スタックを使って、何かの作業を記録しておくシンプルな例を見てみましょう。

9キューとは？:QueueExample 
キューはデータを一時的に保管しておき、必要になった順に取り出して使用するためのデータ構造です。例えば、プリンタの印刷待ち行列や、イベントのチケット販売など、実生活でキューの原理が使われる場面は多いです。

9キューの基本操作:QueueExample 
キューでよく使われる操作には「エンキュー（Enqueue）」と「デキュー（Dequeue）」があります。

エンキュー（Enqueue）：キューの末尾に新しい要素を追加します。
デキュー（Dequeue）：キューの先頭から要素を取り出し、それをキューから削除します。
キューの例
UnityのC#スクリプトでキューを使う方法を示します。この例では、キューにいくつかの数字を追加し、それを順番に取り出します。

10イベントとは？:Party 
イベントは、ある特別なことが起こったときに、その知らせを他の人やものに伝える方法です。
例えば、学校で運動会があるとき、先生が「運動会が始まりますよ！」とみんなに知らせるのがイベントです。

プログラミングでの「イベント」も同じようなもので、何か特別なことが起こったときに、プログラムの他の部分にそれを知らせます。
これを使うと、プログラムの一部が他の部分とおしゃべりして、何をすべきかを教えることができます。

イベントの使い方
例として、お誕生日パーティーで風船が割れたときに、みんなに知らせるようなイベントを作ってみましょう。
ここでは、風船が割れるという「イベント」をプログラムでどう作るかを見てみます。

11Vector3とは？
Vector3は、3Dのゲームやプログラムで、場所や動きを表すための特別なツールです。
例えば、部屋の中で一番左の角、天井の高さ、そして壁からどれくらい離れているかを数で表すときに使います。
具体的には、Vector3は3つの数字でできていて、これらはX（横）、Y（縦）、Z（奥行き）を表します。

Vector3の使い方
Vector3を使って、ゲームの中で物がどこにあるか、どう動くかを決めることができます。
例えば、ゲームの中でボールを投げるとき、そのボールがどの方向にどれだけ飛ぶかをVector3で表すことができます。

困ったら上記の内容をAIに聞こう（どこ？何すればいいの？説明せよなど）
 */
public class Chapter2Guide : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}
